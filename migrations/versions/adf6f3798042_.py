"""empty message

Revision ID: adf6f3798042
Revises: 
Create Date: 2022-10-03 15:58:56.741859

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = 'adf6f3798042'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('equipamentos',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('descricao', sa.String(length=255), nullable=False),
    sa.Column('marca', sa.String(length=255), nullable=False),
    sa.Column('numero_de_serie', sa.String(length=255), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('numero_de_serie')
    )
    op.create_table('pacientes',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('nome', sa.String(length=255), nullable=False),
    sa.Column('data_de_nascimento', sa.Date(), nullable=True),
    sa.Column('identificador', sa.String(length=255), nullable=True),
    sa.Column('sexo', sa.String(length=10), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('tecnicas',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('descricao', sa.String(length=255), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('tipos_de_refracao',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('descricao', sa.String(length=255), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('descricao')
    )
    op.create_table('refracoes',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('olho', sa.String(length=2), nullable=True),
    sa.Column('tipo_de_refracao_id', sa.Integer(), nullable=True),
    sa.Column('sphere', sa.Float(), nullable=True),
    sa.Column('cylinder', sa.Float(), nullable=True),
    sa.Column('axis', sa.Integer(), nullable=True),
    sa.Column('data_da_refracao', sa.DateTime(), nullable=True),
    sa.Column('paciente_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['paciente_id'], ['pacientes.id'], ),
    sa.ForeignKeyConstraint(['tipo_de_refracao_id'], ['tipos_de_refracao.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('tratamentos',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('id_equipamento', sa.Integer(), nullable=True),
    sa.Column('id_paciente', sa.Integer(), nullable=True),
    sa.Column('olho', sa.String(length=2), nullable=True),
    sa.Column('method', sa.String(length=255), nullable=True),
    sa.Column('status', sa.String(length=255), nullable=True),
    sa.Column('planned_by', sa.String(length=255), nullable=True),
    sa.Column('treated_by', sa.String(length=255), nullable=True),
    sa.Column('planning_date', sa.DateTime(), nullable=True),
    sa.Column('treatment_date', sa.DateTime(), nullable=True),
    sa.Column('confirmed_by', sa.String(length=255), nullable=True),
    sa.Column('device_sn', sa.String(length=10), nullable=True),
    sa.Column('refraction_clinical_id', sa.Integer(), nullable=True),
    sa.Column('pupil', sa.Float(), nullable=True),
    sa.Column('pachymetry_superior', sa.Integer(), nullable=True),
    sa.Column('pachymetry_temporal', sa.Integer(), nullable=True),
    sa.Column('pachymetry_central', sa.Integer(), nullable=True),
    sa.Column('pachymetry_nasal', sa.Integer(), nullable=True),
    sa.Column('pachymetry_inferior', sa.Integer(), nullable=True),
    sa.Column('k1', sa.Float(), nullable=True),
    sa.Column('axis1', sa.Integer(), nullable=True),
    sa.Column('q1', sa.Float(), nullable=True),
    sa.Column('k2', sa.Float(), nullable=True),
    sa.Column('q2', sa.Float(), nullable=True),
    sa.Column('axis2', sa.Integer(), nullable=True),
    sa.Column('refraction_measured_id', sa.Integer(), nullable=True),
    sa.Column('refraction_target_id', sa.Integer(), nullable=True),
    sa.Column('refraction_correction_id', sa.Integer(), nullable=True),
    sa.Column('target_q', sa.Float(), nullable=True),
    sa.Column('optical_zone', sa.Float(), nullable=True),
    sa.Column('transition_zone', sa.Float(), nullable=True),
    sa.Column('ablation_zone', sa.Float(), nullable=True),
    sa.Column('flap_epi_thickness', sa.Integer(), nullable=True),
    sa.Column('cornea_thickness', sa.Integer(), nullable=True),
    sa.Column('residual_stroma', sa.Integer(), nullable=True),
    sa.Column('cyclorotation', sa.Float(), nullable=True),
    sa.Column('centration_x', sa.Integer(), nullable=True),
    sa.Column('centration_y', sa.Integer(), nullable=True),
    sa.Column('total_duration', sa.Integer(), nullable=True),
    sa.Column('breaks_qt', sa.Integer(), nullable=True),
    sa.Column('breaks_seconds', sa.Integer(), nullable=True),
    sa.Column('pachymetry_records_preop', sa.Integer(), nullable=True),
    sa.Column('pachymetry_records_flap_epi_off', sa.Integer(), nullable=True),
    sa.Column('pachymetry_records_post_op', sa.Integer(), nullable=True),
    sa.Column('maximum_depth', sa.Float(), nullable=True),
    sa.Column('central_depth', sa.Float(), nullable=True),
    sa.Column('memo', sa.String(), nullable=True),
    sa.Column('flap_diameter', sa.Float(), nullable=True),
    sa.Column('flap_thickness', sa.Integer(), nullable=True),
    sa.Column('flap_side_cut_angle', sa.Integer(), nullable=True),
    sa.Column('flap_canal_width', sa.Integer(), nullable=True),
    sa.Column('flap_canal_lenght_offset', sa.Float(), nullable=True),
    sa.Column('hinge_position', sa.Integer(), nullable=True),
    sa.Column('hinge_lenght', sa.Float(), nullable=True),
    sa.Column('hinge_angle', sa.Integer(), nullable=True),
    sa.Column('hinge_width', sa.Float(), nullable=True),
    sa.Column('laser_separations_bed_cut_line_separations', sa.Float(), nullable=True),
    sa.Column('laser_separations_bed_cut_spot_separations', sa.Float(), nullable=True),
    sa.Column('laser_separations_side_cut_line_separations', sa.Float(), nullable=True),
    sa.Column('laser_separations_side_cut_spot_separations', sa.Float(), nullable=True),
    sa.Column('measured_data_pulse_energy_bed_cut', sa.Float(), nullable=True),
    sa.Column('measured_data_pulse_energy_side_cut', sa.Float(), nullable=True),
    sa.Column('measured_data_suction_time', sa.Float(), nullable=True),
    sa.Column('measured_data_device_temperature', sa.Float(), nullable=True),
    sa.Column('treatment_data_treatment_progress', sa.Integer(), nullable=True),
    sa.Column('treatment_data_treatment_breaks', sa.Integer(), nullable=True),
    sa.Column('treatment_data_x_offset', sa.Float(), nullable=True),
    sa.Column('treatment_data_y_offset', sa.Float(), nullable=True),
    sa.Column('ring_outer_diameter', sa.Float(), nullable=True),
    sa.Column('ring_inner_diameter', sa.Float(), nullable=True),
    sa.Column('ring_depth_in_cornea', sa.Integer(), nullable=True),
    sa.Column('incision_length', sa.Float(), nullable=True),
    sa.Column('incision_width', sa.Float(), nullable=True),
    sa.Column('incision_position', sa.Integer(), nullable=True),
    sa.Column('laser_separations_ring_spot_separations', sa.Float(), nullable=True),
    sa.Column('laser_separations_ring_line_separations', sa.Float(), nullable=True),
    sa.Column('laser_separations_incision_spot_separations', sa.Float(), nullable=True),
    sa.Column('laser_separations_incision_line_separations', sa.Float(), nullable=True),
    sa.Column('measured_data_pulse_energy_ring', sa.Float(), nullable=True),
    sa.Column('measured_data_pulse_energy_incision', sa.Float(), nullable=True),
    sa.Column('flap_offset_torsion', sa.Integer(), nullable=True),
    sa.Column('measured_data_pulse_energy_canal', sa.Float(), nullable=True),
    sa.Column('target_data_pulse_energy_ring', sa.Float(), nullable=True),
    sa.Column('target_data_pulse_energy_incision', sa.Float(), nullable=True),
    sa.Column('target_data_pulse_energy_canal', sa.Float(), nullable=True),
    sa.Column('pdf_file', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['id_equipamento'], ['equipamentos.id'], ),
    sa.ForeignKeyConstraint(['id_paciente'], ['pacientes.id'], ),
    sa.ForeignKeyConstraint(['refraction_clinical_id'], ['refracoes.id'], ),
    sa.ForeignKeyConstraint(['refraction_correction_id'], ['refracoes.id'], ),
    sa.ForeignKeyConstraint(['refraction_measured_id'], ['refracoes.id'], ),
    sa.ForeignKeyConstraint(['refraction_target_id'], ['refracoes.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('treatment_date')
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('tratamentos')
    op.drop_table('refracoes')
    op.drop_table('tipos_de_refracao')
    op.drop_table('tecnicas')
    op.drop_table('pacientes')
    op.drop_table('equipamentos')
    # ### end Alembic commands ###
